from aiogram import Router, F
from aiogram.types import CallbackQuery
from datetime import date, timedelta
from calendar import monthrange, monthcalendar
from DataBase.dao import Lesson, User
import asyncio

from Keyboard.inline_creator import create_inline_kb

router = Router()

dates = list()
async def get_dates_from_db():
    global dates
    if dates:
        dates.clear()
    dates = [str(i.day) for i in await Lesson.find_all()]
    print(dates)


@router.callback_query(F.data == 'settings')
async def log(callback: CallbackQuery):
    await get_dates_from_db()
    
    await callback.message.edit_text(
        text='–º–µ–Ω—é',
        parse_mode='MarkdownV2',
        reply_markup=create_inline_kb(1,
                                        profile='–ü—Ä–æ—Ñ–∏–ª—å üë§',
                                        archive='–ê—Ä—Ö–∏–≤',
                                        support='–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                                        log_button='–Ω–∞–∑–∞–¥'))
    await callback.answer()
    
async def create_dict_for_keyboard(year : int, month :int):
    weekday = date(year, month, 1).weekday()                                        #–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
    dates_dict = {f'{i}':'„Ö§' for i in range(weekday+6)}                              #–∑–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞
    
    for i in range(1, monthrange(year, month)[1]+1):                                #–∑–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–∞—Ç–∞–º–∏ –Ω–∞ –º–µ—Å—è—Ü
        date_dt = date(year, month, i)                                              #–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ datetime
        
        if date_dt.weekday() != 6:                                                  #–µ—Å–ª–∏ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            check = await Lesson.find_one_or_none(day=date_dt)                      #–ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –ë–î —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
            dates_dict[f'{date_dt:%Y-%m-%d}'] = '„Ö§'                                #–∑–∞–ø–æ–ª–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            
            if check:                                                               #–µ—Å–ª–∏ –∂–µ –≤ –±–∞–∑–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å
                dates_dict[f'{date_dt:%Y-%m-%d}'] = f'{date_dt:%Y-%m-%d}'[8:]       #–ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                
    max_len = [36, 30][len(dates_dict) <= 30]                                       #–¥–ª–∏–Ω–∞ –¥–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å (30 –∏–ª–∏ 36)
    
    
    while len(dates_dict) < max_len:                                                #–ø–æ–∫–∞ –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞—Ä—è –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∞ –Ω—É–∂–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        dates_dict[f'{len(dates_dict)}'] = '„Ö§'                                     #–¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    dates_dict.update({'0':'–ø–Ω', '1':'–≤—Ç', '2':'—Å—Ä', '3':'—á—Ç', '4':'–ø—Ç', '5':'—Å–±'})
    return dates_dict # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å

@router.callback_query(F.data == 'archive')
async def beta_button_2(callback: CallbackQuery):
    month = f'{date.today():%m}'
    year = f'{date.today():%Y}'
    new_dict = await create_dict_for_keyboard(year, int(month))
    
    await callback.message.edit_text(
        text=f'`‚Ä¢            –º–µ—Å—è—Ü           ‚Ä¢`',
        parse_mode='MarkdownV2',
        reply_markup=create_inline_kb(6,
                                      **new_dict,
                                      settings='–Ω–∞–∑–∞–¥'))
    await callback.answer('–±–µ—Ç–∞')

@router.callback_query(F.data.in_(['1', '2', '3', '4', '5', '0']))     
async def answer(callback: CallbackQuery):
    await callback.answer('—ç—Ç–æ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏')

@router.callback_query(F.data.in_(dates))
async def print_day22(callback: CallbackQuery):
    
    print(dates)
    await callback.message.edit_text(
        text=f'`good`',
        parse_mode='MarkdownV2',
        reply_markup=create_inline_kb(1,
                                      archive='–Ω–∞–∑–∞–¥'))
    await callback.answer()
    
    